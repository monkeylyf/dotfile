" This is Yifeng's .vimrc file

"""""""""""""""""""""""
" Bundle plugin session.
"""""""""""""""""""""""
set nocompatible
filetype off  " Turn off for Vundle
" set the runtime path to include Vundle and initialize
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')
set rtp+=~/.vim/bundle/Vundle.vim

"""""""""""""""""""""""
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" Command-t.
Plugin 'wincent/command-t'
let g:CommentedTWildIgnore=&wildignore . ",*.pyc"
" Navigate between different tmux panel/vim
Plugin 'christoomey/vim-tmux-navigator'
" COC
Plugin 'neoclide/coc.nvim'
" Color scheme
Plugin 'morhetz/gruvbox'
" Plugin 'itchyny/lightline.vim'

call vundle#end()  " required
"""""""""""""""""""""""
" Turn on color scheme
autocmd vimenter * ++nested colorscheme gruvbox
set background=dark
let &t_ut=''  " Should fix background mixed up issue?

filetype plugin on  " Re-enable after Vundle block

"""""""""""""""""""""""""""""
" Basic Editing Configuration """""""""""""""""""""""""""""
" allow unsaved background buffers and remember marks/undo for them
set hidden
" Remember number of commands as history
set history=1000
" insert space characters whenever the tab key is pressed
set expandtab
" Be smart when using tabs lol
set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=4
" show matched bracket
set showmatch
" refine search pattern when typing
set incsearch
" search with highlight
set hlsearch
" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase
" command line window height
set cmdheight=1
" buffer management
set switchbuf=useopen
set showtabline=2
set winwidth=79
" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=
" keep more context when scrolling off the end of a buffer
set scrolloff=5
" make no backups at all
set nobackup
set nowritebackup
" group all .swp files in one location
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" display command while typing
set showcmd
" use emacs-style tab completion when selecting files, etc
set wildmode=longest,list
" make tab completion for files/buffers act like bash
set wildmenu
" fix slow O inserts
set timeout timeoutlen=1000 ttimeoutlen=100
" normally, Vim messes with iskeyword when you open a shell file. This can
" leak out, polluting other file types even after a 'set ft=' change. This
" variable prevents the iskeyword change so it can't hurt anyone.
let g:sh_noisk=1
" turn on folding
set foldmethod=syntax
set foldlevel=99
" insert only one space when joining lines that contain sentence-terminating
" punctuation like `.`.
set nojoinspaces
" if a file is changed outside of vim, automatically reload it without asking
set autoread
" set line number.
set number relativenumber
" search down into subfolders
" provides tab-completion for all file-related tasks
set path+=**
" line number.
set number relativenumber
" enable syntax and plugins (for netrw)
syntax enable

""""""""""""""""""
" Mapping & Leader
""""""""""""""""""
let mapleader=","

" Search word under cursor.
:nmap <space> *
" Undo search highlight.
" :nmap <leader><space> :set hls!<cr>
:nmap <leader><space> :noh<CR>
" Delete current line in insert mode.
:imap <c-d> <esc>ddi

" Move around splits with <c-hjkl>
nnoremap <c-h> <c-w>h  " Left panel.
nnoremap <c-j> <c-w>j  " Down panel.
nnoremap <c-k> <c-w>k  " Up panel.
nnoremap <c-l> <c-w>l  " Right panel.
" Move around tabs
nnoremap <Tab> gt
noremap <Left> gT
noremap <Right> gt
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt
" Disable arrow keys in normal mode.
let noarrowkeys="Arrow keys not allowed in normal mode madafacar!"
noremap <Up> :echo noarrowkeys<CR>
noremap <Down> :echo noarrowkeys<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
set statusline=%<%F%h%m%r%h%w%y\ %{strftime(\"%c\",getftime(expand(\"%:p\")))}%=\ %l\/%L\,%c%V\ %P

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    echom "debug: " . col
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
" inoremap <s-tab> <c-n>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM AUTOCMDS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimrcEx
  " remove trailing whitespaces triggered by pre buffer write event
  autocmd BufWritePre * :%s/\s\+$//e
  " recover last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " language indentation & softtabstops & expandtab
  autocmd FileType ruby,haml,eruby,yaml,html,javascript,typescript,java,scala set ai sw=2 sts=2 et
  autocmd FileType python set ai sw=4 sts=4 et
augroup END
