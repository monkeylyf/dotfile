" This is Yifeng's .vimrc file

"""""""""""""""""""""""
" Bundle plugin session.
"""""""""""""""""""""""
set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim

" set the runtime path to include Vundle and initialize.
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Plugins
"""""""""""""""""""""""
" Plugin 'airblade/vim-gitgutter'
" Update time to generate a git diff.
" set updatetime=100
" let g:gitgutter_override_sign_column_highlight = 0
" Max signs.
" let g:gitgutter_max_signs = 500
"""""""""""""""""""""""
Plugin 'altercation/vim-colors-solarized'
"""""""""""""""""""""""
Plugin 'christoomey/vim-tmux-navigator'
"""""""""""""""""""""""
Plugin 'vifm/vifm.vim'
"""""""""""""""""""""""
" Plugin 'python.vim'
"""""""""""""""""""""""
" Plugin 'vim-scripts/nginx.vim'
"""""""""""""""""""""""
" Plugin 'raimondi/delimitmate'
"""""""""""""""""""""""
" Plugin 'rust-lang/rust.vim'
"""""""""""""""""""""""
" Plugin 'leafgarland/typescript-vim'
" let g:typescript_indent_disable = 1
" let g:typescript_compiler_binary = 'tsc'
" let g:typescript_compiler_options = ''
"""""""""""""""""""""""
Plugin 'HerringtonDarkholme/yats.vim'
"""""""""""""""""""""""
" Plugin 'sirver/ultisnips'
"""""""""""""""""""""""
" Plugin 'taglist.vim'
"""""""""""""""""""""""
Plugin 'terryma/vim-multiple-cursors'
"""""""""""""""""""""""
Plugin 'tpope/vim-fugitive'
"""""""""""""""""""""""
Plugin 'tpope/vim-surround'
"""""""""""""""""""""""
" Plugin 'ap/vim-css-color'
"""""""""""""""""""""""
" Plugin 'w0rp/ale'
"""""""""""""""""""""""
Plugin 'wincent/command-t'
let g:CommandTWildIgnore=&wildignore . ",*.pyc"
"""""""""""""""""""""""
Plugin 'itchyny/lightline.vim'
"""""""""""""""""""""""
" Plugin 'vim-airline/vim-airline'
" Plugin 'vim-airline/vim-airline-themes'
" let g:airline_theme='luna'
" let g:airline_powerline_fonts = 1
" function! AirlineInit()
"     let g:airline_section_a = airline#section#create(['mode', ' ', 'branch'])
" endfunction
" autocmd VimEnter * call AirlineInit()
"""""""""""""""""""""""
" Plugin 'scrooloose/syntastic'
" let g:syntastic_check_on_open=1
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
"
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
"""""""""""""""""""""""
" Plugin 'scrooloose/nerdtree'
" Fireup nerdtree when vim with no args
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" Fireup nerdtree no matther there are args or not
" autocmd vimenter * NERDTree
" Close vim if the only window left open is a NERDTree
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Ignore file
" :let g:NERDTreeIgnore=['\~$', '__pycache__']
"""""""""""""""""""""""
"Plugin 'scrooloose/nerdcommenter'
" Add spaces after comment delimiters by default
" let g:NERDSpaceDelims = 1
" Plugin 'jiangmiao/auto-pairs'
" Plugin 'fatih/vim-go'
"""""""""""""""""""""""
" React/Javascript syntax highlighting
Plugin 'pangloss/vim-javascript'
"""""""""""""""""""""""
" Plugin 'mxw/vim-jsx'
" Turn on syntax highlights
"let g:go_highlight_functions = 1
"let g:go_highlight_methods = 1
"let g:go_highlight_fields = 1
"let g:go_highlight_types = 1
"let g:go_highlight_operators = 1
"let g:go_highlight_build_constraints = 1
"""""""""""""""""""""""
" Plugin 'Valloric/YouCompleteMe'
" let g:ycm_python_binary_path = '/usr/bin/python3'
" YCM's identifier completer seeds its identifier database with the keywords of
" the programming language.
" let g:ycm_seed_identifiers_with_syntax = 1
"""""""""""""""""""""""
" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required

"""""""""""""""""""""""""""""
" Basic Editing Configuration
"""""""""""""""""""""""""""""
" allow unsaved background buffers and remember marks/undo for them
set hidden
" Remember number of commands as history
set history=1000
" insert space characters whenever the tab key is pressed
set expandtab
" Be smart when using tabs lol
set smarttab
set tabstop=4
set shiftwidth=4
set softtabstop=4
" show matched bracket
set showmatch
" refine search pattern when typing
set incsearch
" search with highlight
set hlsearch
" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase
" command line window height
set cmdheight=1
" buffer management...
set switchbuf=useopen
set showtabline=2
set winwidth=79
" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=
" keep more context when scrolling off the end of a buffer
set scrolloff=5
" make no backups at all
set nobackup
set nowritebackup
" group all .swp files in one location
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" display command while typing
set showcmd
" use emacs-style tab completion when selecting files, etc
set wildmode=longest,list
" make tab completion for files/buffers act like bash
set wildmenu
" Fix slow O inserts
set timeout timeoutlen=1000 ttimeoutlen=100
" Normally, Vim messes with iskeyword when you open a shell file. This can
" leak out, polluting other file types even after a 'set ft=' change. This
" variable prevents the iskeyword change so it can't hurt anyone.
let g:sh_noisk=1
" Turn on folding
set foldmethod=syntax
set foldlevel=99
" Insert only one space when joining lines that contain sentence-terminating
" punctuation like `.`.
set nojoinspaces
" If a file is changed outside of vim, automatically reload it without asking
set autoread
" set line number.
set number relativenumber

set path+=**                    " Searches current directory recursively.
set wildmenu					" Display all matches when tab complete.
set incsearch
set nobackup
set noswapfile

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM AUTOCMDS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup vimrcEx
  " remove trailing whitespaces triggered by pre buffer write event
  autocmd BufWritePre * :%s/\s\+$//e
  autocmd FileType python nnoremap <buffer> <leader>c I#<esc>
  " recover last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " language indentation & softtabstops & expandtab
  autocmd FileType ruby,haml,eruby,yaml,html,javascript,typescript,java,scala set ai sw=2 sts=2 et
  autocmd FileType python set ai sw=4 sts=4 et

  autocmd! BufRead,BufNewFile *.sass setfiletype sass

  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt;
  autocmd BufRead *.markdown  set ai formatoptions=tcroqn2 comments=n:&gt;
augroup END

""""""""
" Status
""""""""
" set status line
" Commented out because of plugin 'vim-airline'
"set statusline=%<%F%h%m%r%h%w%y\ %{strftime(\"%c\",getftime(expand(\"%:p\")))}%=\ %l\/%L\,%c%V\ %P
set laststatus=2

""""""""""""
" Syntax
"""""""""""
syntax on
syntax enable

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR & Scheme
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:solarized_termcolors=256
let g:rehash256=1
set background=dark
colorscheme solarized

""""""""""""""""""
" Mapping & Leader
""""""""""""""""""
let mapleader=","

" Search word under cursor.
:nmap <space> *
" Undo search highlight.
" :nmap <leader><space> :set hls!<cr>
:nmap <leader><space> :noh<CR>
" Delete current line in insert mode.
:imap <c-d> <esc>ddi

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vifm
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <Leader>v :Vifm<CR>
map <Leader>vs :VsplitVifm<CR>
map <Leader>sp :SplitVifm<CR>
map <Leader>dv :DiffVifm<CR>
map <Leader>tv :TabVifm<CR>

" Move around splits with <c-hjkl>
nnoremap <c-h> <c-w>h  " Left panel.
nnoremap <c-j> <c-w>j  " Down panel.
nnoremap <c-k> <c-w>k  " Up panel.
nnoremap <c-l> <c-w>l  " Right panel.
" Move around tabs
nnoremap <Tab> gt
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt
" Disable arrow keys in normal mode.
let noarrowkeys="Arrow keys not allowed in normal mode madafacar!"
noremap <Up> :echo noarrowkeys<CR>
noremap <Down> :echo noarrowkeys<CR>
noremap <Left> :echo noarrowkeys<CR>
noremap <Right> :echo noarrowkeys<CR>

" Insert a hash rocket with <c-l>
inoremap <c-l> <space>=><space>
" Insert a left rocket with <c-k>
inoremap <c-k> <space><-<space>
" Plugins shortcuts
" Ycm shortcuts.
nnoremap <leader><leader>c :YcmCompleter GoToDeclaration<CR>
nnoremap <leader><leader>f :YcmCompleter GoToDefinition<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    echom "debug: " . col
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
" inoremap <s-tab> <c-n>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    echom 'old: ' . old_name
    call inputsave()
    let new_name = input('New file name: ')
    " to avoid Vim typeahead mechanism.
    call inputrestore()

    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RUN CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! SaveAndRunCurrentFile()
    " Save current file before run.
    exec ':w'
    let current_filetype = &filetype
    if (current_filetype == 'go')
        exec ':!go run %'
    elseif (current_filetype == 'python')
        exec ':!python3 %'
    elseif (current_filetype == 'java')
        exec ':!javac % && java %:r'
    elseif (current_filetype == 'rust')
        "let dir = fnamemodify('.', ':p')
        "let project = split(dir, '/')[-1]
        "echo 'Cargo Building project [' . project ']...'
        " The following cargo build command is customized for monkeos project.
        "exec ':!cargo rustc -- -Z pre-link-arg=-lSystem && ./target/debug/' . project
        exec ':!rustc % && RUST_BACKTRACE=1 ./%:r && rm ./%:r'
    elseif (current_filetype == 'cpp')
        exec ':!g++ % -o ./%:r && ./%:r'
    else
        echo 'file type ' . current_filetype . ' not supported'
    endif
    "autocmd BufNewFile,BufRead go exec ':!go run %<cr>'
endfunction
map <leader>r :call SaveAndRunCurrentFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OpenChangedFiles COMMAND
" Open a split for each dirty file in git
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git status -s | grep "^ \?\(M\|A\|UU\)" | sed "s/^.\{3\}//"')
  let filenames = split(status, "\n")
  exec "edit " . filenames[0]
  for filename in filenames[1:]
    exec "sp " . filename
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RemoveFancyCharacters COMMAND
" Remove smart quotes, etc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RemoveFancyCharacters()
    let typo = {}
    let typo["“"] = '"'
    let typo["”"] = '"'
    let typo["‘"] = "'"
    let typo["’"] = "'"
    let typo["–"] = '--'
    let typo["—"] = '---'
    let typo["…"] = '...'
    :exe ":%s/".join(keys(typo), '\|').'/\=typo[submatch(0)]/ge'
endfunction
command! RemoveFancyCharacters :call RemoveFancyCharacters()
